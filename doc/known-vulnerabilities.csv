DependencyName,DependencyPath,Description,License,Md5,Sha1,Identifiers,CPE,CVE,CWE,Vulnerability,Source,CVSSv2_Severity,CVSSv2_Score,CVSSv2,CVSSv3_BaseSeverity,CVSSv3_BaseScore,CVSSv3,CPE Confidence,Evidence Count,VendorProject,Product,Name,DateAdded,ShortDescription,RequiredAction,DueDate,Notes
netty-transport-4.1.85.Final.jar,/home/runner/.m2/repository/io/netty/netty-transport/4.1.85.Final/netty-transport-4.1.85.Final.jar,Netty is an asynchronous event-driven network application framework for    rapid development of maintainable high performance protocol servers and    clients.,https://www.apache.org/licenses/LICENSE-2.0,0d7b19a22daf8abe25650cc01bb3148b,2c30699dd565568303847d87c89f76a01e5cc8ee,pkg:maven/io.netty/netty-transport@4.1.85.Final,cpe:2.3:a:netty:netty:4.1.85:*:*:*:*:*:*:*,CVE-2022-41881,CWE-674 Uncontrolled Recursion,"Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,31,,,,,,,,
netty-transport-4.1.85.Final.jar,/home/runner/.m2/repository/io/netty/netty-transport/4.1.85.Final/netty-transport-4.1.85.Final.jar,Netty is an asynchronous event-driven network application framework for    rapid development of maintainable high performance protocol servers and    clients.,https://www.apache.org/licenses/LICENSE-2.0,0d7b19a22daf8abe25650cc01bb3148b,2c30699dd565568303847d87c89f76a01e5cc8ee,pkg:maven/io.netty/netty-transport@4.1.85.Final,cpe:2.3:a:netty:netty:4.1.85:*:*:*:*:*:*:*,CVE-2022-41915,"CWE-436 Interpretation Conflict, CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')","Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values.",NVD,,,,MEDIUM,6.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N,HIGH,31,,,,,,,,
